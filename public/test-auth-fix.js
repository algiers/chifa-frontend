/**
 * Script de diagnostic pour l'authentification Supabase
 * Ce script v√©rifie l'√©tat de l'authentification et aide √† r√©soudre les probl√®mes
 */

// Fonction pour v√©rifier les tokens dans le localStorage
function checkLocalStorage() {
  console.log('üîç V√©rification du localStorage...');
  
  // Liste des cl√©s possibles pour les tokens Supabase
  const possibleKeys = [
    'sb-ddeibfjxpwnisguehnmo-auth-token',
    'supabase.auth.token',
    'auth-storage',
    'sb-access-token',
    'sb-refresh-token'
  ];
  
  let foundTokens = false;
  
  possibleKeys.forEach(key => {
    const value = localStorage.getItem(key);
    if (value) {
      console.log(`‚úÖ Trouv√©: ${key}`);
      try {
        const parsed = JSON.parse(value);
        console.log(`üìã Type: ${typeof parsed}`);
        console.log(`üîë Contient access_token: ${!!parsed.access_token}`);
        console.log(`üîÑ Contient refresh_token: ${!!parsed.refresh_token}`);
        console.log(`‚è∞ Expire √†: ${parsed.expires_at ? new Date(parsed.expires_at * 1000).toLocaleString() : 'Non sp√©cifi√©'}`);
        
        // V√©rifier si le token est expir√©
        if (parsed.expires_at) {
          const now = Math.floor(Date.now() / 1000);
          const expiresAt = parsed.expires_at;
          const timeLeft = expiresAt - now;
          
          if (timeLeft <= 0) {
            console.log(`‚ö†Ô∏è Token EXPIR√â depuis ${Math.abs(timeLeft)} secondes`);
          } else {
            console.log(`‚úÖ Token valide pour encore ${timeLeft} secondes (${Math.floor(timeLeft / 60)} minutes)`);
          }
        }
        
        foundTokens = true;
      } catch (e) {
        console.log(`‚ùå Impossible de parser la valeur: ${e.message}`);
      }
      console.log('');
    }
  });
  
  if (!foundTokens) {
    console.log('‚ùå Aucun token trouv√© dans le localStorage');
  }
  
  // V√©rifier le store Zustand
  const authStore = localStorage.getItem('auth-storage');
  if (authStore) {
    try {
      const parsed = JSON.parse(authStore);
      console.log('üìä √âtat du store d\'authentification:');
      console.log(`üë§ User: ${!!parsed.state.user}`);
      console.log(`üîë Session Token: ${!!parsed.state.sessionToken}`);
      console.log(`üè• Code PS: ${parsed.state.codePs}`);
      console.log(`üìã Pharmacy Status: ${parsed.state.pharmacyStatus}`);
    } catch (e) {
      console.log(`‚ùå Impossible de parser le store d'authentification: ${e.message}`);
    }
  } else {
    console.log('‚ùå Store d\'authentification non trouv√©');
  }
}

// Fonction pour v√©rifier les cookies
function checkCookies() {
  console.log('\nüç™ V√©rification des cookies...');
  
  const cookies = document.cookie.split(';').map(cookie => cookie.trim());
  const supabaseCookies = cookies.filter(cookie => 
    cookie.startsWith('sb-') || 
    cookie.startsWith('supabase.') ||
    cookie.includes('auth')
  );
  
  if (supabaseCookies.length > 0) {
    console.log('‚úÖ Cookies Supabase trouv√©s:');
    supabaseCookies.forEach(cookie => {
      const [name, value] = cookie.split('=');
      console.log(`üìã ${name}: ${value.substring(0, 20)}...`);
    });
  } else {
    console.log('‚ùå Aucun cookie Supabase trouv√©');
  }
}

// Fonction pour tester la r√©cup√©ration du token comme dans ChatInput.tsx
function testTokenRetrieval() {
  console.log('\nüß™ Test de r√©cup√©ration du token comme dans ChatInput.tsx...');
  
  const accessToken = localStorage.getItem('sb-ddeibfjxpwnisguehnmo-auth-token') ||
    sessionStorage.getItem('sb-ddeibfjxpwnisguehnmo-auth-token');
  
  if (accessToken) {
    try {
      const tokenData = JSON.parse(accessToken);
      const authToken = tokenData.access_token;
      
      if (authToken) {
        console.log(`‚úÖ Token r√©cup√©r√© avec succ√®s: ${authToken.substring(0, 20)}...`);
      } else {
        console.log('‚ùå access_token non trouv√© dans les donn√©es du token');
      }
    } catch (e) {
      console.log(`‚ùå Erreur lors du parsing du token: ${e.message}`);
    }
  } else {
    console.log('‚ùå Token non trouv√© dans localStorage ou sessionStorage');
  }
}

// Fonction pour sugg√©rer des corrections
function suggestFixes() {
  console.log('\nüîß Suggestions de corrections:');
  console.log('1. V√©rifiez que le nom de la cl√© dans localStorage est correct');
  console.log('   - La cl√© actuelle est "sb-ddeibfjxpwnisguehnmo-auth-token"');
  console.log('   - V√©rifiez dans la console du navigateur si cette cl√© existe');
  console.log('2. Assurez-vous que persistSession est activ√© dans la configuration Supabase');
  console.log('3. V√©rifiez que les cookies sont correctement configur√©s');
  console.log('4. Essayez de vous d√©connecter et de vous reconnecter');
  console.log('5. V√©rifiez que le domaine des cookies correspond √† votre environnement');
}

// Ex√©cuter les fonctions de diagnostic
console.log('üîç DIAGNOSTIC D\'AUTHENTIFICATION SUPABASE');
console.log('=======================================');
checkLocalStorage();
checkCookies();
testTokenRetrieval();
suggestFixes();